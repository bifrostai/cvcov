{"version":3,"file":"index.umd.js","sources":["../src/Panel.tsx","../src/Plugin.tsx"],"sourcesContent":["import { Button } from \"@fiftyone/components\";\r\nimport {\r\n  useOperatorExecutor,\r\n  Operator,\r\n  OperatorConfig,\r\n  registerOperator,\r\n} from \"@fiftyone/operators\";\r\nimport * as fos from \"@fiftyone/state\";\r\nimport { State } from \"@fiftyone/state\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  LinearProgress,\r\n  Alert,\r\n  Checkbox,\r\n} from \"@mui/material\";\r\n\r\ntype ProgressInfo = {\r\n  progress: number;\r\n  label: string;\r\n  operation?: string;\r\n};\r\n\r\ntype ActiveOperations = {\r\n  [key: string]: ProgressInfo;\r\n};\r\n\r\nexport function Panel() {\r\n  // Debug mode\r\n  const [debugMode, setDebugMode] = useState(true);\r\n\r\n  // Global FiftyOne state\r\n  const dataset: State.Dataset | null = useRecoilValue(fos.dataset);\r\n  const filters = useRecoilValue(fos.filters);\r\n\r\n  // Local plugin state\r\n  const [annotations, setAnnotations] = useState<any[]>([]);\r\n  const [doProgressPoll, setDoProgressPoll] = useState(false);\r\n  const [activeOperations, setActiveOperations] = useState<ActiveOperations>({});\r\n  const [clusteringResults, setClusteringResults] = useState<any>(null);\r\n\r\n  // Python operator: compute embeddings\r\n  const computeEmbeddingsExecutor = useOperatorExecutor(\r\n    \"@bifrostai/cvcov/compute_embeddings\",\r\n    {\r\n      onSuccess: (result: any) => {\r\n        console.log(\"Embedding computation completed:\", result);\r\n        // Auto-continue with clustering after embeddings complete\r\n        clusterEmbeddingsExecutor.execute({});\r\n      },\r\n      onError: (error: any) => {\r\n        console.log(\"Embedding computation failed:\", error);\r\n        setDoProgressPoll(false);\r\n      },\r\n    }\r\n  ) as any;\r\n\r\n  // Python operator: cluster embeddings\r\n  const clusterEmbeddingsExecutor = useOperatorExecutor(\r\n    \"@bifrostai/cvcov/cluster_embeddings\",\r\n    {\r\n      onSuccess: (result: any) => {\r\n        console.log(\"Clustering completed:\", result);\r\n        setDoProgressPoll(false);\r\n        setActiveOperations({});\r\n        // Extract the actual result data from the nested structure\r\n        setClusteringResults(result.result);\r\n      },\r\n      onError: (error: any) => {\r\n        console.log(\"Clustering failed:\", error);\r\n        setDoProgressPoll(false);\r\n      },\r\n    }\r\n  ) as any;\r\n\r\n  // Python operator: fetch annotations\r\n  const fetchAnnotationsExecutor = useOperatorExecutor(\r\n    \"@bifrostai/cvcov/fetch_annotations\"\r\n  );\r\n\r\n  // Python operator: get progress\r\n  const getProgressExecutor = useOperatorExecutor(\r\n    \"@bifrostai/cvcov/get_progress\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (dataset) {\r\n      fetchAnnotationsExecutor.execute({});\r\n    }\r\n  }, [dataset, filters]);\r\n\r\n  useEffect(() => {\r\n    if (fetchAnnotationsExecutor.result?.annotations) {\r\n      setAnnotations(fetchAnnotationsExecutor.result.annotations);\r\n    }\r\n  }, [fetchAnnotationsExecutor.result]);\r\n\r\n  // Poll for progress updates using operator\r\n  useEffect(() => {\r\n    if (!doProgressPoll) return;\r\n\r\n    const interval = setInterval(() => {\r\n      getProgressExecutor.execute({}); // No operation_name = get all active operations\r\n    }, 500); // Poll every 500ms\r\n\r\n    return () => clearInterval(interval);\r\n  }, [doProgressPoll]);\r\n\r\n  // Handle progress updates for all active operations\r\n  useEffect(() => {\r\n    if (getProgressExecutor.result) {\r\n      const result = getProgressExecutor.result;\r\n\r\n      if (result.active_operations) {\r\n        const operations = result.active_operations;\r\n        const newActiveOperations: ActiveOperations = {};\r\n\r\n        // Process all active operations\r\n        for (const [operationName, progressData] of Object.entries(operations)) {\r\n          newActiveOperations[operationName] = {\r\n            progress: (progressData as any).progress,\r\n            label: (progressData as any).label,\r\n            operation: operationName,\r\n          };\r\n        }\r\n\r\n        setActiveOperations(newActiveOperations);\r\n\r\n        // Stop polling if no active operations or all completed\r\n        const hasActiveOperations = Object.values(newActiveOperations).some(\r\n          (op) => op.progress < 1\r\n        );\r\n        if (!hasActiveOperations) {\r\n          setDoProgressPoll(false);\r\n        }\r\n      } else if (result.progress !== undefined) {\r\n        // Handle single operation response (fallback)\r\n        setActiveOperations({\r\n          unknown: {\r\n            progress: result.progress,\r\n            label: result.label,\r\n            operation: \"unknown\",\r\n          },\r\n        });\r\n\r\n        if (result.progress >= 1) {\r\n          setDoProgressPoll(false);\r\n        }\r\n      } else {\r\n        // No operations found\r\n        setActiveOperations({});\r\n        setDoProgressPoll(false);\r\n      }\r\n    }\r\n  }, [getProgressExecutor.result]);\r\n\r\n  return (\r\n    <Box sx={{ p: 2 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Bifrost CVCov Plugin\r\n      </Typography>\r\n      <Typography variant=\"body1\" gutterBottom>\r\n        Dataset: {dataset?.name || \"No dataset loaded\"}\r\n      </Typography>\r\n\r\n      <Box sx={{ mt: 2, mb: 2 }}>\r\n        <Checkbox\r\n          checked={debugMode}\r\n          onChange={() => {\r\n            setDebugMode(!debugMode);\r\n          }}\r\n        />\r\n        <Typography variant=\"body2\" display=\"inline\" sx={{ ml: 1 }}>\r\n          Debug mode\r\n        </Typography>\r\n      </Box>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        disabled={doProgressPoll}\r\n        onClick={() => {\r\n          setDoProgressPoll(true);\r\n          setActiveOperations({});\r\n          computeEmbeddingsExecutor.execute({});\r\n        }}\r\n      >\r\n        {doProgressPoll ? \"Processing...\" : \"Compute Embeddings & Cluster\"}\r\n      </Button>\r\n\r\n      {/* Show progress bars for all active operations */}\r\n      {Object.keys(activeOperations).length > 0 && (\r\n        <Box sx={{ mt: 2, mb: 2 }}>\r\n          {Object.entries(activeOperations).map(([operationName, progressInfo]) => (\r\n            <Box key={operationName} sx={{ mb: 1 }}>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {operationName.charAt(0).toUpperCase() + operationName.slice(1)}: {progressInfo.label} ({Math.round(progressInfo.progress * 100)}% complete)\r\n              </Typography>\r\n              <LinearProgress\r\n                variant=\"determinate\"\r\n                value={progressInfo.progress * 100}\r\n              />\r\n            </Box>\r\n          ))}\r\n        </Box>\r\n      )}\r\n\r\n      {/* Show completion message */}\r\n      {computeEmbeddingsExecutor.result?.message &&\r\n        !computeEmbeddingsExecutor.isExecuting && (\r\n          <Alert severity=\"success\" sx={{ mt: 2, mb: 2 }}>\r\n            {computeEmbeddingsExecutor.result.message}\r\n          </Alert>\r\n        )}\r\n\r\n      {/* Show clustering results */}\r\n      {clusteringResults && (\r\n        <Box sx={{ mt: 2, mb: 2 }}>\r\n          <Alert severity=\"success\" sx={{ mb: 2 }}>\r\n            {clusteringResults.message}\r\n          </Alert>\r\n\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Clustering Results\r\n          </Typography>\r\n\r\n          <Box sx={{ display: \"flex\", gap: 4, flexWrap: \"wrap\", mb: 2 }}>\r\n            <Box>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Number of Clusters\r\n              </Typography>\r\n              <Typography variant=\"h4\" color=\"primary\">\r\n                {clusteringResults.num_clusters}\r\n              </Typography>\r\n            </Box>\r\n\r\n            <Box>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Total Objects\r\n              </Typography>\r\n              <Typography variant=\"h4\">\r\n                {clusteringResults.labels?.length || 0}\r\n              </Typography>\r\n            </Box>\r\n\r\n            {clusteringResults.labels && (\r\n              <Box>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Noise Points (Cluster -1)\r\n                </Typography>\r\n                <Typography variant=\"h4\" color=\"error\">\r\n                  {clusteringResults.labels.filter((label: number) => label === -1).length}\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </Box>\r\n\r\n          {clusteringResults.labels && (\r\n            <Box>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                Cluster Distribution:\r\n              </Typography>\r\n              <Box sx={{ maxHeight: 200, overflow: \"auto\" }}>\r\n                {Object.entries(\r\n                  clusteringResults.labels.reduce((acc: any, label: number) => {\r\n                    acc[label] = (acc[label] || 0) + 1;\r\n                    return acc;\r\n                  }, {})\r\n                )\r\n                  .sort(([a], [b]) => Number(a) - Number(b))\r\n                  .map(([cluster, count]) => (\r\n                    <Box key={cluster} sx={{ display: \"flex\", justifyContent: \"space-between\", py: 0.5 }}>\r\n                      <Typography variant=\"body2\">\r\n                        Cluster {cluster === \"-1\" ? \"(Noise)\" : cluster}:\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" fontWeight=\"bold\">\r\n                        {count} objects\r\n                      </Typography>\r\n                    </Box>\r\n                  ))}\r\n              </Box>\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      )}\r\n\r\n      {/* Debug info: show annotations table */}\r\n      {debugMode && (\r\n        <>\r\n          <Typography variant=\"h6\" sx={{ mt: 2, mb: 2 }}>\r\n            Annotated Objects ({annotations.length})\r\n          </Typography>\r\n\r\n          <TableContainer component={Paper} sx={{ maxHeight: 400 }}>\r\n            <Table stickyHeader size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Sample ID</TableCell>\r\n                  <TableCell>Type</TableCell>\r\n                  <TableCell>Label</TableCell>\r\n                  <TableCell>Confidence</TableCell>\r\n                  <TableCell>Field</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {annotations.map((annotation) => (\r\n                  <TableRow key={annotation.id}>\r\n                    <TableCell>{annotation.sampleId}</TableCell>\r\n                    <TableCell>{annotation.type}</TableCell>\r\n                    <TableCell>{annotation.label}</TableCell>\r\n                    <TableCell>{annotation.confidence}</TableCell>\r\n                    <TableCell>{annotation.field}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n          {annotations.length === 0 && !fetchAnnotationsExecutor.isLoading && (\r\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 2 }}>\r\n              No annotations found in the current dataset view.\r\n            </Typography>\r\n          )}\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\n// Example frontend operator\r\nclass AlertOperator extends Operator {\r\n  get config() {\r\n    return new OperatorConfig({\r\n      name: \"show_alert\",\r\n      label: \"Show alert\",\r\n      unlisted: true,\r\n    });\r\n  }\r\n  async execute() {\r\n    alert(`Hello from plugin ${this.pluginName}`);\r\n  }\r\n}\r\nregisterOperator(AlertOperator, \"@bifrostai/cvcov\");\r\n","import { PluginComponentType, registerComponent } from \"@fiftyone/plugins\";\r\nimport { Panel } from \"./Panel\";\r\nimport { State } from \"@fiftyone/state\";\r\n\r\n// Add the plugin to the registry\r\nregisterComponent({\r\n  name: \"Bifrost CVCov\",\r\n  label: \"Bifrost CVCov\",\r\n  component: Panel,\r\n  type: PluginComponentType.Panel,\r\n  activator: myActivator,\r\n  panelOptions: {\r\n    surfaces: \"grid modal\",\r\n    isNew: true,\r\n  },\r\n});\r\n\r\n// A function that returns true if the plugin should be active\r\nfunction myActivator({ dataset }: { dataset: State.Dataset | null }) {\r\n  // Example of activating the plugin in a particular context\r\n  // return dataset.name === 'quickstart'\r\n\r\n  return true;\r\n}\r\n"],"names":["Panel","debugMode","setDebugMode","useState","dataset","useRecoilValue","fos","filters","annotations","setAnnotations","doProgressPoll","setDoProgressPoll","activeOperations","setActiveOperations","clusteringResults","setClusteringResults","computeEmbeddingsExecutor","useOperatorExecutor","result","clusterEmbeddingsExecutor","error","fetchAnnotationsExecutor","getProgressExecutor","useEffect","_a","interval","operations","newActiveOperations","operationName","progressData","op","Box","Typography","Checkbox","Button","progressInfo","LinearProgress","Alert","_b","label","acc","a","b","cluster","count","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","annotation","AlertOperator","Operator","OperatorConfig","registerOperator","registerComponent","PluginComponentType","myActivator"],"mappings":"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"}